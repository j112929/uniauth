apply plugin: 'war'

buildscript {
    repositories {
        maven { url 'http://nexus.dianrong.com/nexus/content/groups/public/' }
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/'}
   	 	mavenCentral()
        maven {
            url "https://maven.eveoh.nl/content/repositories/releases"
        }
    }
    dependencies {
        classpath "com.eriwen:gradle-js-plugin:1.12.0"
        classpath 'com.eriwen:gradle-css-plugin:1.11.1'
        classpath "nl.eveoh:gradle-aspectj:1.6"
    }
}

apply plugin: 'js'

project.ext {
    aspectjVersion = '1.8.8'
}
apply plugin: 'aspectj'
combineJs {
    source = fileTree("src/main/webapp/scripts") {
        exclude "lib/**"
    }
    dest = file("src/main/webapp/scripts/all.js")
}

requireJs {
    source = fileTree("src/main/webapp/scripts") {
        exclude "lib/**"
    }
    dest = file("src/main/webapp/scripts/all.js")
    requirejs.buildprofile = new File("src/main/webapp/build.js")
}

minifyJs {
    source = requireJs
    dest = file("src/main/webapp/scripts/all.min.js")
    closure {
        warningLevel ='QUIET'
    }
}

def timestamp = System.currentTimeMillis();

gzipJs {
    source = minifyJs
    dest = file("src/main/webapp/scripts/all-${timestamp}.min.js")
}

task updateIncludes(dependsOn: ['gzipJs']) {
    // replace stuffs in index.html
}

sourceSets {
    deployment {
        java {
            srcDir 'src/deployment/java'
        }
        compileClasspath += configurations.compile
        runtimeClasspath += configurations.compile
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 60, 'seconds'
}

dependencies {
    // This is the first project to use the release version of cas&uniauth-server,
    // so if there is a version upgrade, we should make sure the release version is work for techops system first then ask other teams to upgrade.
        
    if (rootProject.dianrongRepoEnable) {
      // compile "com.dianrong.common.uniauth:share-rw:2.0.06.RELEASE"
      // compile "com.dianrong.common.uniauth:common-uniauth-ssclient:2.0.06.RELEASE"
        compile project(":ss-client")
        compile project(":share-rw")
    } else {
        compile project(":ss-client")
        compile project(":share-rw")
    }

    //Spring
    //def spring_version = '4.1.6.RELEASE'

    compile('org.springframework.boot:spring-boot-actuator:1.3.5.RELEASE'){
        exclude group: 'org.springframework.boot', module:'spring-boot-starter-logging'
    }
    compile "org.springframework:spring-context"
    compile "org.springframework:spring-tx"
    compile "org.springframework:spring-web"
    compile "org.springframework:spring-webmvc"
    compile "org.springframework:spring-context-support"
    compile "org.springframework:spring-aop"

    //Aspectj
    compile "org.aspectj:aspectjrt:1.8.8"
    compile "org.aspectj:aspectjtools:1.8.8"

    //Java EE
    providedCompile 'javax.servlet:javax.servlet-api'
    compile 'javax.validation:validation-api'
    compile 'org.hibernate:hibernate-validator'

    //Http Components
    compile 'org.apache.httpcomponents:httpclient'
    compile 'org.apache.httpcomponents:fluent-hc'
    compile 'org.apache.httpcomponents:httpmime'

    // common
    compile 'org.apache.commons:commons-lang3'
    compile 'commons-fileupload:commons-fileupload'

    //Google Jar
    compile 'com.google.guava:guava'

    //Test Suite
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile "org.springframework:spring-test"
    
    // swagger
    compile 'io.springfox:springfox-swagger2:2.2.2'
    compile 'io.springfox:springfox-swagger-ui:2.2.2'
    
    // log
    compile 'ch.qos.logback:logback-classic'
    
    compile 'org.springframework.security:spring-security-aspects'
    aspectpath 'org.springframework.security:spring-security-aspects'
}

loadConfiguration()

task printProps {
    doLast {
        println "frontend.apiBase: $config.frontend.apibase"
    }
}

def loadConfiguration() {
    def environment = hasProperty('profile') ? profile : 'dev'
    project.ext.environment = environment
    println "Environment is set to $environment"

    def configFile = file('config.groovy')
    def config = new ConfigSlurper(environment).parse(configFile.toURI().toURL());
    project.ext.config = config
}

// import org.apache.tools.ant.filters.ReplaceTokens

war {
    baseName = config.tomcat.tomcatAppName
    archiveName = config.tomcat.tomcatAppName + '.war'
    destinationDir = file('build')
//    configure {
//        filter(ReplaceTokens, tokens: ['apibase': config.frontend.apibase])
//    }
}

task warTechopsWebsite(dependsOn: war) {

}

task tomcatUndeploy(type: JavaExec) {
    main = 'gradle.TomcatDeploy'
    args = ['undeploy',
            config.tomcat.tomcatAppName,
            config.tomcat.tomcatUsername,
            config.tomcat.tomcatPassword,
            config.tomcat.tomcatHost]
    classpath = sourceSets.deployment.runtimeClasspath
    doFirst {
        println "removing war file from Tomcat."
    }
}

task tomcatDeploy(type: JavaExec, dependsOn: warTechopsWebsite) {
    doFirst {
        println "deploying war file " + config.tomcat.tomcatWarFile + " to Tomcat."
    }
    main = 'gradle.TomcatDeploy'
    args = ['deploy',
            config.tomcat.tomcatAppName,
            config.tomcat.tomcatWarFile,
            config.tomcat.tomcatUsername,
            config.tomcat.tomcatPassword,
            config.tomcat.tomcatHost]
    classpath = sourceSets.deployment.runtimeClasspath
}

task tomcatRedeploy(type: JavaExec, dependsOn: warTechopsWebsite) {
    doFirst {
        println "redeploying war file " + config.tomcat.tomcatWarFile + " to Tomcat."
    }
    main = 'gradle.TomcatDeploy'
    args = ['redeploy',
            config.tomcat.tomcatAppName,
            config.tomcat.tomcatWarFile,
            config.tomcat.tomcatUsername,
            config.tomcat.tomcatPassword,
            config.tomcat.tomcatHost]
    classpath = sourceSets.deployment.runtimeClasspath
}

task tomcatWLinDeploy(type: JavaExec, dependsOn: warTechopsWebsite) {
    doFirst {
        println "deploying war file " + config.tomcat.tomcatWarFile + " to Tomcat."
    }
    main = 'gradle.TomcatDeploy'
    args = ['deploy',
            config.tomcat.tomcatAppName,
            config.tomcat.tomcatWarFile,
            'tomcat',
            'tomcat',
            'localhost:8100']
    classpath = sourceSets.deployment.runtimeClasspath
}

task tomcatWLinRedeploy(type: JavaExec, dependsOn: warTechopsWebsite) {
    doFirst {
        println "redeploying war file " + config.tomcat.tomcatWarFile + " to Tomcat."
    }
    main = 'gradle.TomcatDeploy'
    args = ['redeploy',
            config.tomcat.tomcatAppName,
            config.tomcat.tomcatWarFile,
             'tomcat',
            'tomcat',
            'localhost:8100']
    classpath = sourceSets.deployment.runtimeClasspath
}
